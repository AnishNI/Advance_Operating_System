slip 18

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int fileExists(const char *filename) {
    // Access the file using access system call
    if (access(filename, F_OK) != -1) {
        return 1; // File exists
    } else {
        return 0; // File does not exist
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return EXIT_FAILURE;
    }

    const char *filename = argv[1];

    if (fileExists(filename)) {
        printf("File '%s' exists in the current directory.\n", filename);
    } else {
        printf("File '%s' does not exist in the current directory.\n", filename);
    }

    return EXIT_SUCCESS;
}

gcc your_program_name.c -o your_program_name
./your_program_name your_filename


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define MESSAGE1 "Hello World"
#define MESSAGE2 "Hello SPPU"
#define MESSAGE3 "Linux is Funny"

int main() {
    int pipefd[2];
    pid_t childPid;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Error creating pipe");
        return EXIT_FAILURE;
    }

    // Fork a child process
    if ((childPid = fork()) == -1) {
        perror("Fork failed");
        return EXIT_FAILURE;
    }

    if (childPid == 0) {
        // Child process
        close(pipefd[0]); // Close the read end of the pipe

        // Write messages to the pipe
        write(pipefd[1], MESSAGE1, sizeof(MESSAGE1));
        write(pipefd[1], MESSAGE2, sizeof(MESSAGE2));
        write(pipefd[1], MESSAGE3, sizeof(MESSAGE3));

        // Close the write end of the pipe
        close(pipefd[1]);

        exit(EXIT_SUCCESS);
    } else {
        // Parent process
        close(pipefd[1]); // Close the write end of the pipe

        char buffer[256];

        // Read messages from the pipe and display them
        printf("Messages received from the child process:\n");

        // Read Message1
        read(pipefd[0], buffer, sizeof(buffer));
        printf("%s\n", buffer);

        // Read Message2
        read(pipefd[0], buffer, sizeof(buffer));
        printf("%s\n", buffer);

        // Read Message3
        read(pipefd[0], buffer, sizeof(buffer));
        printf("%s\n", buffer);

        // Close the read end of the pipe
        close(pipefd[0]);

        wait(NULL); // Wait for the child process to complete
    }

    return EXIT_SUCCESS;
}


gcc your_program_name.c -o your_program_name
./your_program_name


