slip 11

#include <stdio.h>
#include <stdlib.h>
#include <sys/resource.h>

void printLimits() {
    struct rlimit limit;

    // Get resource limit for maximum number of file descriptors
    if (getrlimit(RLIMIT_NOFILE, &limit) == -1) {
        perror("getrlimit failed");
        exit(EXIT_FAILURE);
    }

    printf("Current limit for maximum number of file descriptors: %lu\n", limit.rlim_cur);

    // Get resource limit for maximum size of the process's data segment
    if (getrlimit(RLIMIT_DATA, &limit) == -1) {
        perror("getrlimit failed");
        exit(EXIT_FAILURE);
    }

    printf("Current limit for maximum data size: %lu bytes\n", limit.rlim_cur);
}

void setLimits() {
    struct rlimit newLimit;

    // Set new resource limit for maximum number of file descriptors
    newLimit.rlim_cur = 100;
    newLimit.rlim_max = 200;

    if (setrlimit(RLIMIT_NOFILE, &newLimit) == -1) {
        perror("setrlimit for RLIMIT_NOFILE failed");
        exit(EXIT_FAILURE);
    }

    printf("New limit for maximum number of file descriptors set successfully.\n");

    // Set new resource limit for maximum size of the process's data segment
    newLimit.rlim_cur = 1024 * 1024 * 2; // 2 MB
    newLimit.rlim_max = 1024 * 1024 * 4; // 4 MB

    if (setrlimit(RLIMIT_DATA, &newLimit) == -1) {
        perror("setrlimit for RLIMIT_DATA failed");
        exit(EXIT_FAILURE);
    }

    printf("New limit for maximum data size set successfully.\n");
}

int main() {
    printf("Current resource limits:\n");
    printLimits();

    printf("\nSetting new resource limits:\n");
    setLimits();

    printf("\nUpdated resource limits:\n");
    printLimits();

    return EXIT_SUCCESS;
}
gcc your_program_name.c -o your_program_name
./your_program_name


#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    // Open or create a file for writing
    int fileDescriptor = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);

    if (fileDescriptor == -1) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    // Duplicate the file descriptor to standard output (STDOUT_FILENO)
    if (dup2(fileDescriptor, STDOUT_FILENO) == -1) {
        perror("Error redirecting standard output");
        close(fileDescriptor);
        return EXIT_FAILURE;
    }

    // Close the file descriptor (it is no longer needed as it has been duplicated to STDOUT_FILENO)
    close(fileDescriptor);

    // Now, standard output is redirected to the file
    printf("This is written to the file instead of the terminal.\n");

    // Reset standard output to the terminal
    if (dup2(STDOUT_FILENO, STDOUT_FILENO) == -1) {
        perror("Error resetting standard output");
        return EXIT_FAILURE;
    }

    // Content after this line will be printed to the terminal
    printf("This is written to the terminal.\n");

    return EXIT_SUCCESS;
}


gcc your_program_name.c -o your_program_name
./your_program_name
