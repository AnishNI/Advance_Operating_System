slip 19
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void printFileProperties(const char *filename) {
    struct stat fileStat;

    // Use stat to get information about the file
    if (stat(filename, &fileStat) == -1) {
        perror("Error getting file information");
        return;
    }

    // Display file properties
    printf("File: %s\n", filename);
    printf("Inode number: %lu\n", (unsigned long)fileStat.st_ino);
    
    // Determine the file type
    if (S_ISREG(fileStat.st_mode)) {
        printf("File type: Regular File\n");
    } else if (S_ISDIR(fileStat.st_mode)) {
        printf("File type: Directory\n");
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("File type: Symbolic Link\n");
    } else {
        printf("File type: Unknown\n");
    }

    printf("\n");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Iterate through command-line arguments (files) and print their properties
    for (int i = 1; i < argc; ++i) {
        printFileProperties(argv[i]);
    }

    return EXIT_SUCCESS;
}
gcc your_program_name.c -o your_program_name
./your_program_name file1 file2 file3


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];
    pid_t childPid;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Error creating pipe");
        return EXIT_FAILURE;
    }

    // Fork a child process
    if ((childPid = fork()) == -1) {
        perror("Fork failed");
        return EXIT_FAILURE;
    }

    if (childPid == 0) {
        // Child process

        // Redirect standard output to the write end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);
        close(pipefd[0]);
        close(pipefd[1]);

        // Execute "ls -l" using exec
        execlp("ls", "ls", "-l", (char *)NULL);
        perror("Error executing ls");
        exit(EXIT_FAILURE);
    } else {
        // Parent process

        // Wait for the child process to complete
        waitpid(childPid, NULL, 0);

        // Redirect standard input to the read end of the pipe
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);
        close(pipefd[1]);

        // Execute "wc -l" using exec
        execlp("wc", "wc", "-l", (char *)NULL);
        perror("Error executing wc");
        exit(EXIT_FAILURE);
    }

    return EXIT_SUCCESS;
}

gcc your_program_name.c -o your_program_name
./your_program_name
