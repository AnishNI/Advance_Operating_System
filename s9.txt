slip 9

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    char buffer[50];

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return EXIT_FAILURE;
    }

    pid_t childPid;

    // Fork a child process
    childPid = fork();

    if (childPid == -1) {
        perror("Fork failed");
        return EXIT_FAILURE;
    } else if (childPid == 0) {
        // Child process

        // Close the write end of the pipe
        close(pipefd[1]);

        // Read from the pipe and display the message
        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));
        if (bytesRead > 0) {
            printf("Child process received: %.*s\n", (int)bytesRead, buffer);
        } else {
            perror("Read from pipe failed");
        }

        // Close the read end of the pipe
        close(pipefd[0]);

        exit(EXIT_SUCCESS);
    } else {
        // Parent process

        // Close the read end of the pipe
        close(pipefd[0]);

        // Write a message to the pipe
        const char *message = "Hello from the parent!";
        write(pipefd[1], message, strlen(message) + 1);

        // Close the write end of the pipe
        close(pipefd[1]);

        // Wait for the child process to complete
        wait(NULL);
    }

    return EXIT_SUCCESS;
}
gcc your_program_name.c -o your_program_name
./your_program_name


#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

void identifyFileType(const char *filename) {
    struct stat fileInfo;

    // Use stat to get information about the file
    if (stat(filename, &fileInfo) == -1) {
        perror("Error getting file information");
        exit(EXIT_FAILURE);
    }

    // Identify the type of the file
    if (S_ISREG(fileInfo.st_mode)) {
        printf("%s is a regular file.\n", filename);
    } else if (S_ISDIR(fileInfo.st_mode)) {
        printf("%s is a directory.\n", filename);
    } else if (S_ISCHR(fileInfo.st_mode)) {
        printf("%s is a character device.\n", filename);
    } else if (S_ISBLK(fileInfo.st_mode)) {
        printf("%s is a block device.\n", filename);
    } else if (S_ISFIFO(fileInfo.st_mode)) {
        printf("%s is a FIFO or pipe.\n", filename);
    } else if (S_ISLNK(fileInfo.st_mode)) {
        printf("%s is a symbolic link.\n", filename);
    } else if (S_ISSOCK(fileInfo.st_mode)) {
        printf("%s is a socket.\n", filename);
    } else {
        printf("%s is of an unknown type.\n", filename);
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return EXIT_FAILURE;
    }

    const char *filename = argv[1];

    identifyFileType(filename);

    return EXIT_SUCCESS;
}


gcc your_program_name.c -o your_program_name
./your_program_name your_filename




