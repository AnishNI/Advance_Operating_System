 slip 10


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];
    pid_t lsPid, wcPid;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return EXIT_FAILURE;
    }

    // Fork the first child for ls -l
    lsPid = fork();

    if (lsPid == -1) {
        perror("Fork for ls failed");
        return EXIT_FAILURE;
    } else if (lsPid == 0) {
        // Child process for ls
        // Close the read end of the pipe
        close(pipefd[0]);

        // Redirect standard output to the write end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);

        // Close the write end of the pipe
        close(pipefd[1]);

        // Execute ls -l
        execlp("ls", "ls", "-l", NULL);

        // execlp returns only if an error occurs
        perror("execlp for ls failed");
        exit(EXIT_FAILURE);
    }

    // Fork the second child for wc -l
    wcPid = fork();

    if (wcPid == -1) {
        perror("Fork for wc failed");
        return EXIT_FAILURE;
    } else if (wcPid == 0) {
        // Child process for wc
        // Close the write end of the pipe
        close(pipefd[1]);

        // Redirect standard input to the read end of the pipe
        dup2(pipefd[0], STDIN_FILENO);

        // Close the read end of the pipe
        close(pipefd[0]);

        // Execute wc -l
        execlp("wc", "wc", "-l", NULL);

        // execlp returns only if an error occurs
        perror("execlp for wc failed");
        exit(EXIT_FAILURE);
    }

    // Close both ends of the pipe in the parent process
    close(pipefd[0]);
    close(pipefd[1]);

    // Wait for both child processes to complete
    waitpid(lsPid, NULL, 0);
    waitpid(wcPid, NULL, 0);

    return EXIT_SUCCESS;
}


gcc your_program_name.c -o your_program_name
./your_program_name




#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    char buffer[50];

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return EXIT_FAILURE;
    }

    pid_t childPid;

    // Fork a child process
    childPid = fork();

    if (childPid == -1) {
        perror("Fork failed");
        return EXIT_FAILURE;
    } else if (childPid == 0) {
        // Child process

        // Close the write end of the pipe
        close(pipefd[1]);

        // Read from the pipe and display the message
        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));
        if (bytesRead > 0) {
            printf("Child process received: %.*s\n", (int)bytesRead, buffer);
        } else {
            perror("Read from pipe failed");
        }

        // Close the read end of the pipe
        close(pipefd[0]);

        exit(EXIT_SUCCESS);
    } else {
        // Parent process

        // Close the read end of the pipe
        close(pipefd[0]);

        // Write a message to the pipe
        const char *message = "Hello from the parent!";
        write(pipefd[1], message, strlen(message) + 1);

        // Close the write end of the pipe
        close(pipefd[1]);

        // Wait for the child process to complete
        wait(NULL);
    }

    return EXIT_SUCCESS;
}


gcc your_program_name.c -o your_program_name
./your_program_name
