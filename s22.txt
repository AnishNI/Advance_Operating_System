slip 22


#include <stdio.h>
#include <stdlib.h>

int main() {
    // Open a file for writing (create if not exists, truncate if exists)
    FILE *file = freopen("output.txt", "w", stdout);

    if (file == NULL) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    // Redirect standard output to the file
    printf("This text is redirected to output.txt\n");

    // Close the file to restore standard output
    fclose(file);

    // Now, writing to stdout will go to the console
    printf("This text is displayed on the console\n");

    return EXIT_SUCCESS;
}

gcc your_program_name.c -o your_program_name
./your_program_name


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void signalHandler(int signum) {
    // Signal handler to ignore Ctrl-C (SIGINT) and Ctrl-\ (SIGQUIT)
    (void)signum;
}

int main() {
    // Block signals Ctrl-C (SIGINT) and Ctrl-\ (SIGQUIT) during execution
    struct sigaction sa;
    sa.sa_handler = signalHandler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;

    if (sigaction(SIGINT, &sa, NULL) == -1 || sigaction(SIGQUIT, &sa, NULL) == -1) {
        perror("Error blocking signals");
        return EXIT_FAILURE;
    }

    int pipefd[2];
    pid_t childPid;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Error creating pipe");
        return EXIT_FAILURE;
    }

    // Fork a child process
    if ((childPid = fork()) == -1) {
        perror("Fork failed");
        return EXIT_FAILURE;
    }

    if (childPid == 0) {
        // Child process

        // Redirect standard output to the write end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);
        close(pipefd[0]);
        close(pipefd[1]);

        // Execute "ls -l" using exec
        execlp("ls", "ls", "-l", (char *)NULL);
        perror("Error executing ls");
        exit(EXIT_FAILURE);
    } else {
        // Parent process

        // Wait for the child process to complete
        waitpid(childPid, NULL, 0);

        // Redirect standard input to the read end of the pipe
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);
        close(pipefd[1]);

        // Execute "wc -l" using exec
        execlp("wc", "wc", "-l", (char *)NULL);
        perror("Error executing wc");
        exit(EXIT_FAILURE);
    }

    return EXIT_SUCCESS;
}

gcc your_program_name.c -o your_program_name
./your_program_name

