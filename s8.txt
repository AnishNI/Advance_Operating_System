slip 8

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    // Open or create a file for writing
    int fileDescriptor = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);

    if (fileDescriptor == -1) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    // Duplicate the file descriptor to standard output (STDOUT_FILENO)
    if (dup2(fileDescriptor, STDOUT_FILENO) == -1) {
        perror("Error redirecting standard output");
        close(fileDescriptor);
        return EXIT_FAILURE;
    }

    // Close the file descriptor (it is no longer needed as it has been duplicated to STDOUT_FILENO)
    close(fileDescriptor);

    // Now, standard output is redirected to the file
    printf("This is written to the file instead of the terminal.\n");

    // Reset standard output to the terminal
    if (dup2(STDOUT_FILENO, STDOUT_FILENO) == -1) {
        perror("Error resetting standard output");
        return EXIT_FAILURE;
    }

    // Content after this line will be printed to the terminal
    printf("This is written to the terminal.\n");

    return EXIT_SUCCESS;
}

gcc your_program_name.c -o your_program_name
./your_program_name

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return EXIT_FAILURE;
    }

    pid_t lsPid, wcPid;

    // Fork the first child for ls -l
    lsPid = fork();

    if (lsPid == -1) {
        perror("Fork for ls failed");
        return EXIT_FAILURE;
    } else if (lsPid == 0) {
        // Child process for ls
        // Close the read end of the pipe
        close(pipefd[0]);

        // Redirect standard output to the write end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);

        // Close the write end of the pipe
        close(pipefd[1]);

        // Execute ls -l
        execlp("ls", "ls", "-l", NULL);

        // execlp returns only if an error occurs
        perror("execlp for ls failed");
        exit(EXIT_FAILURE);
    }

    // Fork the second child for wc -l
    wcPid = fork();

    if (wcPid == -1) {
        perror("Fork for wc failed");
        return EXIT_FAILURE;
    } else if (wcPid == 0) {
        // Child process for wc
        // Close the write end of the pipe
        close(pipefd[1]);

        // Redirect standard input to the read end of the pipe
        dup2(pipefd[0], STDIN_FILENO);

        // Close the read end of the pipe
        close(pipefd[0]);

        // Execute wc -l
        execlp("wc", "wc", "-l", NULL);

        // execlp returns only if an error occurs
        perror("execlp for wc failed");
        exit(EXIT_FAILURE);
    }

    // Close both ends of the pipe in the parent process
    close(pipefd[0]);
    close(pipefd[1]);

    // Wait for both child processes to complete
    waitpid(lsPid, NULL, 0);
    waitpid(wcPid, NULL, 0);

    return EXIT_SUCCESS;
}

gcc your_program_name.c -o your_program_name
./your_program_name
